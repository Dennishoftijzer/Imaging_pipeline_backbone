module __torch__.___torch_mangle_410.ScriptableAdapter {
  parameters {
  }
  attributes {
    _is_full_backward_hook = None
    model = <__torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN object at 000001B3A11D69F0>
  }
  methods {
    method forward {
      graph(%self : __torch__.___torch_mangle_410.ScriptableAdapter,
            %inputs.1 : (Dict(str, Tensor))):
        %12 : bool = prim::Constant[value=1]() # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:23
        %7 : NoneType = prim::Constant()
        %4 : bool = prim::Constant[value=0]() # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:27:72
        %model : __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN = prim::GetAttr[name="model"](%self)
        %5 : Dict(str, Tensor) = prim::TupleUnpack(%inputs.1)
        %6 : Dict(str, Tensor)[] = prim::ListConstruct(%5)
        %instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="inference"](%model, %6, %7, %4) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:27:28
        %9 : Dict(str, Tensor)[] = prim::ListConstruct()
        %11 : int = aten::len(%instances.1) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:23
         = prim::Loop(%11, %12) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:23
          block0(%13 : int):
            %i.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%instances.1, %13) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:23
            %16 : Dict(str, Tensor) = prim::CallMethod[name="get_fields"](%i.1) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:24
            %17 : Dict(str, Tensor)[] = aten::append(%9, %16) # C:\Users\HOFTIJ~1\AppData\Local\Temp/ipykernel_15240/909090163.py:28:23
            -> (%12)
        return (%9)
  
    }
  }
  submodules {
    module __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN {
      parameters {
      }
      attributes {
        pixel_mean = ...
        pixel_std = ...
        _is_full_backward_hook = None
        input_format = BGR
        vis_period = 0
        backbone = <__torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN object at 000001B3A11E9F70>
        proposal_generator = <__torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN object at 000001B3A11F70F0>
        roi_heads = <__torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads object at 000001B3A11FF970>
      }
      methods {
        method __device_getter {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN):
            %pixel_mean : Tensor = prim::GetAttr[name="pixel_mean"](%self)
            %2 : Device = prim::device(%pixel_mean)
            return (%2)
      
        }
        method forward {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[]):
            %8 : bool = prim::Constant[value=1]()
            %7 : NoneType = prim::Constant()
            %9 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="inference"](%self, %batched_inputs.1, %7, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:146:19
            return (%9)
      
        }
        method inference {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[],
                %detected_instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]?,
                %do_postprocess.1 : bool):
            %88 : str = prim::Constant[value="AssertionError: Scripting is not supported for postprocess."]()
            %41 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:33
            %15 : NoneType = prim::Constant() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:202:33
            %86 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::Uninitialized()
            %images.1 : __torch__.detectron2.structures.image_list.ImageList = prim::CallMethod[name="preprocess_image"](%self, %batched_inputs.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:199:17
            %backbone : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN = prim::GetAttr[name="backbone"](%self)
            %tensor : Tensor = prim::GetAttr[name="tensor"](%images.1)
            %features.1 : Dict(str, Tensor) = prim::CallMethod[name="forward"](%backbone, %tensor) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:200:19
            %16 : bool = aten::__is__(%detected_instances.1, %15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:202:11
            %results : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::If(%16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:202:8
              block0():
                %proposal_generator : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN = prim::GetAttr[name="proposal_generator"](%self)
                %24 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Dict(str, Tensor)) = prim::CallMethod[name="forward"](%proposal_generator, %images.1, %features.1, %15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:204:31
                %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], %26 : Dict(str, Tensor) = prim::TupleUnpack(%24)
                %roi_heads.1 : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads = prim::GetAttr[name="roi_heads"](%self)
                %32 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Dict(str, Tensor)) = prim::CallMethod[name="forward"](%roi_heads.1, %images.1, %features.1, %proposals.1, %15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:209:25
                %results.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], %34 : Dict(str, Tensor) = prim::TupleUnpack(%32)
                -> (%results.1)
              block1():
                %detected_instances.7 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::unchecked_cast(%detected_instances.1)
                %detected_instances.13 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::ListConstruct()
                %40 : int = aten::len(%detected_instances.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:33
                 = prim::Loop(%40, %41) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:33
                  block0(%42 : int):
                    %x.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%detected_instances.7, %42) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:33
                    %45 : Device = prim::CallMethod[name="__device_getter"](%self) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:39
                    %46 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = prim::CallMethod[name="to"](%x.1, %45) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:34
                    %47 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = aten::append(%detected_instances.13, %46) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:211:33
                    -> (%41)
                %roi_heads : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads = prim::GetAttr[name="roi_heads"](%self)
                %results.3 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="forward_with_given_boxes"](%roi_heads, %features.1, %detected_instances.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:212:22
                -> (%results.3)
            %87 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::If(%do_postprocess.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:214:8
              block0():
                 = prim::RaiseException(%88, %15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:215:12
                -> (%86)
              block1():
                -> (%results)
            return (%87)
      
        }
        method preprocess_image {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.___torch_mangle_409.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[]):
            %42 : Function = prim::Constant[name="from_tensors"]()
            %41 : float = prim::Constant[value=0.]()
            %33 : int = prim::Constant[value=1]()
            %21 : bool = prim::Constant[value=0]()
            %20 : NoneType = prim::Constant()
            %10 : str = prim::Constant[value="image"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:20
            %6 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:17
            %images.1 : Tensor[] = prim::ListConstruct()
            %5 : int = aten::len(%batched_inputs.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:17
             = prim::Loop(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:17
              block0(%7 : int):
                %x.1 : Dict(str, Tensor) = aten::__getitem__(%batched_inputs.1, %7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:17
                %11 : Tensor = aten::__getitem__(%x.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:18
                %12 : Device = prim::CallMethod[name="__device_getter"](%self) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:32
                %23 : Tensor = aten::to(%11, %12, %20, %21, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:18
                %24 : Tensor[] = aten::append(%images.1, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:224:17
                -> (%6)
            %images.5 : Tensor[] = prim::ListConstruct()
            %27 : int = aten::len(%images.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:17
             = prim::Loop(%27, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:17
              block0(%29 : int):
                %x.5 : Tensor = aten::__getitem__(%images.1, %29) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:17
                %pixel_mean : Tensor = prim::GetAttr[name="pixel_mean"](%self)
                %34 : Tensor = aten::sub(%x.5, %pixel_mean, %33) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:19
                %pixel_std : Tensor = prim::GetAttr[name="pixel_std"](%self)
                %36 : Tensor = aten::div(%34, %pixel_std) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:19
                %37 : Tensor[] = aten::append(%images.5, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:225:17
                -> (%6)
            %backbone : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN = prim::GetAttr[name="backbone"](%self)
            %40 : int = prim::CallMethod[name="__size_divisibility_getter"](%backbone) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:226:48
            %images.9 : __torch__.detectron2.structures.image_list.ImageList = prim::CallFunction(%42, %images.5, %40, %41) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\meta_arch\rcnn.py:226:17
            return (%images.9)
      
        }
      }
      submodules {
        module __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN {
          parameters {
          }
          attributes {
            _is_full_backward_hook = None
            in_features = (res2, res3, res4, res5)
            _out_feature_strides = {p2: 4, p3: 8, p4: 16, p5: 32, p6: 64}
            _out_features = [p2, p3, p4, p5, p6]
            _out_feature_channels = {p2: 256, p3: 256, p4: 256, p5: 256, p6: 256}
            _size_divisibility = 32
            top_block = <__torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool object at 000001B3A11F6370>
            bottom_up = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_381.ResNet object at 000001B3A11F5FF0>
            lateral_convs = <__torch__.torch.nn.modules.container.___torch_mangle_386.ModuleList object at 000001B3A03A4F60>
            output_convs = <__torch__.torch.nn.modules.container.___torch_mangle_388.ModuleList object at 000001B3A03978E0>
          }
          methods {
            method __size_divisibility_getter {
              graph(%self : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN):
                %_size_divisibility : int = prim::GetAttr[name="_size_divisibility"](%self)
                return (%_size_divisibility)
          
            }
            method forward {
              graph(%self : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_389.FPN,
                    %x.1 : Tensor):
                %295 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                %352 : str = prim::Constant[value="AssertionError: "]()
                %350 : int = prim::Constant[value=-4]()
                %346 : int = prim::Constant[value=-3]()
                %133 : int = prim::Constant[value=1]()
                %127 : Function = prim::Constant[name="interpolate"]()
                %126 : bool = prim::Constant[value=0]()
                %123 : NoneType = prim::Constant()
                %120 : str = prim::Constant[value="nearest"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:140:88
                %342 : int = prim::Constant[value=-2]()
                %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:128:82
                %idx.1 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:128:43
                %71 : float = prim::Constant[value=2.]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:140:78
                %bottom_up : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_381.ResNet = prim::GetAttr[name="bottom_up"](%self)
                %bottom_up_features.1 : Dict(str, Tensor) = prim::CallMethod[name="forward"](%bottom_up, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:126:29
                %results.1 : Tensor[] = prim::ListConstruct()
                %lateral_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_386.ModuleList = prim::GetAttr[name="lateral_convs"](%self)
                %_0.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_382.Conv2d = prim::GetAttr[name="0"](%lateral_convs.1)
                %in_features.1 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                %22 : str = prim::TupleIndex(%in_features.1, %21)
                %23 : Tensor = aten::__getitem__(%bottom_up_features.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:128:46
                %prev_features.1 : Tensor = prim::CallMethod[name="forward"](%_0.1, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:128:24
                %output_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_388.ModuleList = prim::GetAttr[name="output_convs"](%self)
                %_0.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d = prim::GetAttr[name="0"](%output_convs.1)
                %36 : Tensor = prim::CallMethod[name="forward"](%_0.3, %prev_features.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:129:23
                %37 : Tensor[] = aten::append(%results.1, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:129:8
                %lateral_convs : __torch__.torch.nn.modules.container.___torch_mangle_386.ModuleList = prim::GetAttr[name="lateral_convs"](%self)
                %_1.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_383.Conv2d = prim::GetAttr[name="1"](%lateral_convs)
                %_2.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_384.Conv2d = prim::GetAttr[name="2"](%lateral_convs)
                %_3.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_385.Conv2d = prim::GetAttr[name="3"](%lateral_convs)
                %output_convs : __torch__.torch.nn.modules.container.___torch_mangle_388.ModuleList = prim::GetAttr[name="output_convs"](%self)
                %_1 : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d = prim::GetAttr[name="1"](%output_convs)
                %_2 : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d = prim::GetAttr[name="2"](%output_convs)
                %_3 : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d = prim::GetAttr[name="3"](%output_convs)
                %in_features.5 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                %features.9 : str = prim::TupleIndex(%in_features.5, %342)
                %features.13 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:139:27
                %top_down_features.5 : Tensor = prim::CallFunction(%127, %prev_features.1, %123, %71, %120, %123, %123, %126) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:140:36
                %lateral_features.5 : Tensor = prim::CallMethod[name="forward"](%_1.5, %features.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:141:35
                %prev_features.37 : Tensor = aten::add(%lateral_features.5, %top_down_features.5, %133) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:142:32
                %149 : Tensor = prim::CallMethod[name="forward"](%_1, %prev_features.37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:34
                 = aten::insert(%results.1, %idx.1, %149) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:16
                %in_features.7 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                %features.17 : str = prim::TupleIndex(%in_features.7, %346)
                %features.21 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:139:27
                %top_down_features.9 : Tensor = prim::CallFunction(%127, %prev_features.37, %123, %71, %120, %123, %123, %126) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:140:36
                %lateral_features.9 : Tensor = prim::CallMethod[name="forward"](%_2.5, %features.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:141:35
                %prev_features.67 : Tensor = aten::add(%lateral_features.9, %top_down_features.9, %133) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:142:32
                %196 : Tensor = prim::CallMethod[name="forward"](%_2, %prev_features.67) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:34
                 = aten::insert(%results.1, %idx.1, %196) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:16
                %in_features : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                %features.25 : str = prim::TupleIndex(%in_features, %350)
                %features.29 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.25) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:139:27
                %top_down_features.13 : Tensor = prim::CallFunction(%127, %prev_features.67, %123, %71, %120, %123, %123, %126) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:140:36
                %lateral_features.13 : Tensor = prim::CallMethod[name="forward"](%_3.5, %features.29) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:141:35
                %prev_features.97 : Tensor = aten::add(%lateral_features.13, %top_down_features.13, %133) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:142:32
                %244 : Tensor = prim::CallMethod[name="forward"](%_3, %prev_features.97) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:34
                 = aten::insert(%results.1, %idx.1, %244) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:145:16
                %top_block.3 : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                %in_feature.1 : str = prim::GetAttr[name="in_feature"](%top_block.3)
                %256 : bool = aten::__contains__(%bottom_up_features.1, %in_feature.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:148:15
                %top_block_in_feature : Tensor = prim::If(%256) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:148:12
                  block0():
                    %top_block.5 : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                    %in_feature.3 : str = prim::GetAttr[name="in_feature"](%top_block.5)
                    %top_block_in_feature.1 : Tensor = aten::__getitem__(%bottom_up_features.1, %in_feature.3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:149:39
                    -> (%top_block_in_feature.1)
                  block1():
                    %_out_features.1 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %top_block.7 : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                    %in_feature : str = prim::GetAttr[name="in_feature"](%top_block.7)
                    %266 : int = aten::index(%_out_features.1, %in_feature) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:151:47
                    %top_block_in_feature.3 : Tensor = aten::__getitem__(%results.1, %266) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:151:39
                    -> (%top_block_in_feature.3)
                %top_block : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                %275 : Tensor[] = prim::CallMethod[name="forward"](%top_block, %top_block_in_feature) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:152:27
                 = aten::extend(%results.1, %275) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:152:12
                %_out_features.3 : str[] = prim::GetAttr[name="_out_features"](%self)
                %278 : int = aten::len(%_out_features.3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:153:15
                %280 : int = aten::len(%results.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:153:42
                %281 : bool = aten::eq(%278, %280) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:153:15
                 = prim::If(%281) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:153:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%352, %123) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:153:8
                    -> ()
                %288 : Dict(str, Tensor) = prim::DictConstruct()
                %_out_features : str[] = prim::GetAttr[name="_out_features"](%self)
                %291 : int = aten::len(%_out_features) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                %292 : int = aten::len(%results.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                %293 : int[] = prim::ListConstruct(%291, %292)
                %294 : int = prim::min(%293) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                 = prim::Loop(%294, %295) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                  block0(%296 : int):
                    %f.1 : str = aten::__getitem__(%_out_features, %296) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                    %res.1 : Tensor = aten::__getitem__(%results.1, %296) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                     = aten::_set_item(%288, %f.1, %res.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:154:15
                    -> (%295)
                return (%288)
          
            }
          }
          submodules {
            module __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                num_levels = 1
                in_feature = p5
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.backbone.fpn.___torch_mangle_345.LastLevelMaxPool,
                        %x.1 : Tensor):
                    %13 : Function = prim::Constant[name="_max_pool2d"]()
                    %11 : bool = prim::Constant[value=0]()
                    %3 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:187:44
                    %4 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:187:54
                    %5 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:187:65
                    %6 : int[] = prim::ListConstruct(%3, %3)
                    %7 : int[] = prim::ListConstruct(%4, %4)
                    %8 : int[] = prim::ListConstruct(%5, %5)
                    %10 : int[] = prim::ListConstruct(%3, %3)
                    %14 : Tensor = prim::CallFunction(%13, %x.1, %6, %7, %8, %10, %11, %11) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\fpn.py:187:16
                    %15 : Tensor[] = prim::ListConstruct(%14)
                    return (%15)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_381.ResNet {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                num_classes = None
                _out_feature_strides = {stem: 4, res2: 4, res3: 8, res4: 16, res5: 32}
                _out_feature_channels = {stem: 64, res2: 256, res3: 512, res4: 1024, res5: 2048}
                stage_names = (res2, res3, res4, res5)
                _out_features = [res2, res3, res4, res5]
                stem = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_348.BasicStem object at 000001B3A11FDC70>
                stages = <__torch__.torch.nn.modules.container.___torch_mangle_380.ModuleList object at 000001B3A05E6170>
              }
              methods {
                method __size_divisibility_getter {
                  graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_381.ResNet):
                    %2 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\backbone.py:40:15
                    return (%2)
              
                }
                method forward {
                  graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_381.ResNet,
                        %x.1 : Tensor):
                    %20 : str = prim::Constant[value="stem"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:446:11
                    %14 : NoneType = prim::Constant()
                    %12 : str = prim::Constant[value="AssertionError: "]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:8
                    %8 : str = prim::Constant[value="ResNet takes an input of shape (N, C, H, W). Got {} instead!"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:29
                    %5 : int = prim::Constant[value=4]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:26
                    %4 : int = aten::dim(%x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:15
                    %6 : bool = aten::eq(%4, %5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:15
                     = prim::If(%6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:8
                      block0():
                        -> ()
                      block1():
                        %10 : int[] = aten::size(%x.1) # <string>:13:9
                        %11 : str = aten::format(%8, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:29
                        %13 : str = aten::add(%12, %11) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:8
                         = prim::RaiseException(%13, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:443:8
                        -> ()
                    %outputs.1 : Dict(str, Tensor) = prim::DictConstruct()
                    %stem : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_348.BasicStem = prim::GetAttr[name="stem"](%self)
                    %x.9 : Tensor = prim::CallMethod[name="forward"](%stem, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:445:12
                    %_out_features.1 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %22 : bool = aten::__contains__(%_out_features.1, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:446:11
                     = prim::If(%22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:446:8
                      block0():
                         = aten::_set_item(%outputs.1, %20, %x.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:447:12
                        -> ()
                      block1():
                        -> ()
                    %stage_names : (str, str, str, str) = prim::GetAttr[name="stage_names"](%self)
                    %name.1 : str, %name.7 : str, %name.13 : str, %name.19 : str = prim::TupleUnpack(%stage_names)
                    %stages : __torch__.torch.nn.modules.container.___torch_mangle_380.ModuleList = prim::GetAttr[name="stages"](%self)
                    %_0 : __torch__.torch.nn.modules.container.___torch_mangle_355.Sequential = prim::GetAttr[name="0"](%stages)
                    %_1 : __torch__.torch.nn.modules.container.___torch_mangle_363.Sequential = prim::GetAttr[name="1"](%stages)
                    %_2 : __torch__.torch.nn.modules.container.___torch_mangle_371.Sequential = prim::GetAttr[name="2"](%stages)
                    %_3 : __torch__.torch.nn.modules.container.___torch_mangle_379.Sequential = prim::GetAttr[name="3"](%stages)
                    %x.15 : Tensor = prim::CallMethod[name="forward"](%_0, %x.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:449:16
                    %_out_features.3 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %47 : bool = aten::__contains__(%_out_features.3, %name.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:15
                     = prim::If(%47) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:12
                      block0():
                         = aten::_set_item(%outputs.1, %name.1, %x.15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:451:16
                        -> ()
                      block1():
                        -> ()
                    %x.21 : Tensor = prim::CallMethod[name="forward"](%_1, %x.15) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:449:16
                    %_out_features.5 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %58 : bool = aten::__contains__(%_out_features.5, %name.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:15
                     = prim::If(%58) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:12
                      block0():
                         = aten::_set_item(%outputs.1, %name.7, %x.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:451:16
                        -> ()
                      block1():
                        -> ()
                    %x.27 : Tensor = prim::CallMethod[name="forward"](%_2, %x.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:449:16
                    %_out_features.7 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %69 : bool = aten::__contains__(%_out_features.7, %name.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:15
                     = prim::If(%69) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:12
                      block0():
                         = aten::_set_item(%outputs.1, %name.13, %x.27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:451:16
                        -> ()
                      block1():
                        -> ()
                    %x.33 : Tensor = prim::CallMethod[name="forward"](%_3, %x.27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:449:16
                    %_out_features : str[] = prim::GetAttr[name="_out_features"](%self)
                    %80 : bool = aten::__contains__(%_out_features, %name.19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:15
                     = prim::If(%80) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:450:12
                      block0():
                         = aten::_set_item(%outputs.1, %name.19, %x.33) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:451:16
                        -> ()
                      block1():
                        -> ()
                    return (%outputs.1)
              
                }
              }
              submodules {
                module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_348.BasicStem {
                  parameters {
                  }
                  attributes {
                    _is_full_backward_hook = None
                    in_channels = 3
                    out_channels = 64
                    stride = 4
                    conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_347.Conv2d object at 000001B3A1200870>
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_348.BasicStem,
                            %x.1 : Tensor):
                        %18 : Function = prim::Constant[name="_max_pool2d"]()
                        %16 : bool = prim::Constant[value=0]()
                        %8 : int = prim::Constant[value=3]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:358:40
                        %9 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:358:50
                        %10 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:358:61
                        %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_347.Conv2d = prim::GetAttr[name="conv1"](%self)
                        %x.5 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:356:12
                        %x.9 : Tensor = aten::relu_(%x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:357:12
                        %11 : int[] = prim::ListConstruct(%8, %8)
                        %12 : int[] = prim::ListConstruct(%9, %9)
                        %13 : int[] = prim::ListConstruct(%10, %10)
                        %15 : int[] = prim::ListConstruct(%10, %10)
                        %x.13 : Tensor = prim::CallFunction(%18, %x.9, %11, %12, %13, %15, %16, %16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:358:12
                        return (%x.13)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.layers.wrappers.___torch_mangle_347.Conv2d {
                      parameters {
                        weight = ...
                      }
                      attributes {
                        weight = ...
                        bias = None
                        training = False
                        _is_full_backward_hook = None
                        transposed = False
                        _reversed_padding_repeated_twice = [3, 3, 3, 3]
                        activation = None
                        norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A11C4870>
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_347.Conv2d,
                                %x.1 : Tensor):
                            %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                            %11 : int = prim::Constant[value=3]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                            %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                            %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                            %18 : int[] = prim::ListConstruct(%8, %8)
                            %19 : int[] = prim::ListConstruct(%11, %11)
                            %20 : int[] = prim::ListConstruct(%14, %14)
                            %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                            %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                            %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                            return (%x.9)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                          parameters {
                          }
                          attributes {
                            weight = ...
                            bias = ...
                            running_mean = ...
                            running_var = ...
                            _is_full_backward_hook = None
                            num_features = 64
                            eps = 1.0000000000000001e-05
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                    %x.1 : Tensor):
                                %55 : Function = prim::Constant[name="batch_norm"]()
                                %54 : float = prim::Constant[value=0.10000000000000001]()
                                %36 : NoneType = prim::Constant()
                                %34 : bool = prim::Constant[value=0]()
                                %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                %3 : bool = prim::requires_grad(%x.1)
                                %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                  block0():
                                    %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                    %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                    %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                    %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                    %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                    %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                    %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                    %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                    %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                    %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                    %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                    %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                    %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                    %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                    %out_dtype.1 : int = prim::dtype(%x.1)
                                    %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                    %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                    %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                    %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                    -> (%46)
                                  block1():
                                    %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                    %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                    %eps : float = prim::GetAttr[name="eps"](%self)
                                    %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                    -> (%56)
                                return (%65)
                          
                            }
                          }
                          submodules {
                          }
                        }
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.container.___torch_mangle_380.ModuleList {
                  parameters {
                  }
                  attributes {
                    _is_full_backward_hook = None
                    0 = <__torch__.torch.nn.modules.container.___torch_mangle_355.Sequential object at 000001B3A05E62F0>
                    1 = <__torch__.torch.nn.modules.container.___torch_mangle_363.Sequential object at 000001B3A0579C80>
                    2 = <__torch__.torch.nn.modules.container.___torch_mangle_371.Sequential object at 000001B3A05C59F0>
                    3 = <__torch__.torch.nn.modules.container.___torch_mangle_379.Sequential object at 000001B3A05F58F0>
                  }
                  methods {
                    method __len__ {
                      graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_380.ModuleList):
                        %1 : int = prim::Constant[value=4]() # <string>:2:10
                        return (%1)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.container.___torch_mangle_355.Sequential {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_352.BottleneckBlock object at 000001B3A05E91F0>
                        1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock object at 000001B3A05F8B70>
                        2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock object at 000001B3A0566080>
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_355.Sequential,
                                %input.1 : Tensor):
                            %_0 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_352.BottleneckBlock = prim::GetAttr[name="0"](%self)
                            %_1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock = prim::GetAttr[name="1"](%self)
                            %_2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock = prim::GetAttr[name="2"](%self)
                            %input.5 : Tensor = prim::CallMethod[name="forward"](%_0, %input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.9 : Tensor = prim::CallMethod[name="forward"](%_1, %input.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.13 : Tensor = prim::CallMethod[name="forward"](%_2, %input.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            return (%input.13)
                      
                        }
                        method __len__ {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_355.Sequential):
                            %1 : int = prim::Constant[value=3]() # <string>:2:10
                            return (%1)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_352.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 64
                            out_channels = 256
                            stride = 1
                            shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d object at 000001B3A05F74F0>
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_350.Conv2d object at 000001B3A05C44F0>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d object at 000001B3A05D0EF0>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d object at 000001B3A05FBDF0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_352.BottleneckBlock,
                                    %x.1 : Tensor):
                                %23 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_350.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                %shortcut.5 : Tensor = prim::CallMethod[name="forward"](%shortcut.3, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:204:23
                                %out.21 : Tensor = aten::add_(%out.17, %shortcut.5, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05C3B70>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_350.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05D0CF0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_350.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05FC7F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05C51F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 256
                            out_channels = 256
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d object at 000001B3A05C3470>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d object at 000001B3A05D15F0>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d object at 000001B3A05F2BF0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05D16F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05F2F70>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05CF3F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 256
                            out_channels = 256
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d object at 000001B3A057A680>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d object at 000001B3A053FC80>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d object at 000001B3A055F080>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_354.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0540600>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_353.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055E680>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_351.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 64
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0562B80>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_349.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.torch.nn.modules.container.___torch_mangle_363.Sequential {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_360.BottleneckBlock object at 000001B3A057D200>
                        1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock object at 000001B3A0545280>
                        2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock object at 000001B3A0560580>
                        3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock object at 000001B3A0570500>
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_363.Sequential,
                                %input.1 : Tensor):
                            %_0 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_360.BottleneckBlock = prim::GetAttr[name="0"](%self)
                            %_1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock = prim::GetAttr[name="1"](%self)
                            %_2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock = prim::GetAttr[name="2"](%self)
                            %_3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock = prim::GetAttr[name="3"](%self)
                            %input.5 : Tensor = prim::CallMethod[name="forward"](%_0, %input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.9 : Tensor = prim::CallMethod[name="forward"](%_1, %input.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.13 : Tensor = prim::CallMethod[name="forward"](%_2, %input.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.17 : Tensor = prim::CallMethod[name="forward"](%_3, %input.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            return (%input.17)
                      
                        }
                        method __len__ {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_363.Sequential):
                            %1 : int = prim::Constant[value=4]() # <string>:2:10
                            return (%1)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_360.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 256
                            out_channels = 512
                            stride = 2
                            shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_356.Conv2d object at 000001B3A0547200>
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_357.Conv2d object at 000001B3A055E880>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d object at 000001B3A0564B80>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d object at 000001B3A0577680>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_360.BottleneckBlock,
                                    %x.1 : Tensor):
                                %23 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_357.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_356.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                %shortcut.5 : Tensor = prim::CallMethod[name="forward"](%shortcut.3, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:204:23
                                %out.21 : Tensor = aten::add_(%out.17, %shortcut.5, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_356.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055D980>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_356.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_357.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0563300>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_357.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0578000>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055E980>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 512
                            out_channels = 512
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d object at 000001B3A055FC00>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d object at 000001B3A056F780>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d object at 000001B3A057D800>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0571200>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057E500>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0562B00>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 512
                            out_channels = 512
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d object at 000001B3A0570400>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d object at 000001B3A057FA80>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d object at 000001B3A055C580>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057F800>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055DA80>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057C980>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 512
                            out_channels = 512
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d object at 000001B3A057E180>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d object at 000001B3A05EADF0>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d object at 000001B3A05F96F0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_362.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055BF80>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_361.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05FA670>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_358.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 128
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05C5E70>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_359.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.torch.nn.modules.container.___torch_mangle_371.Sequential {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_368.BottleneckBlock object at 000001B3A05CC2F0>
                        1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock object at 000001B3A057B280>
                        2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock object at 000001B3A05D12F0>
                        3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock object at 000001B3A057CE00>
                        4 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock object at 000001B3A05E51F0>
                        5 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock object at 000001B3A057FB00>
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_371.Sequential,
                                %input.1 : Tensor):
                            %_0 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_368.BottleneckBlock = prim::GetAttr[name="0"](%self)
                            %_1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock = prim::GetAttr[name="1"](%self)
                            %_2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock = prim::GetAttr[name="2"](%self)
                            %_3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock = prim::GetAttr[name="3"](%self)
                            %_4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock = prim::GetAttr[name="4"](%self)
                            %_5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock = prim::GetAttr[name="5"](%self)
                            %input.5 : Tensor = prim::CallMethod[name="forward"](%_0, %input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.9 : Tensor = prim::CallMethod[name="forward"](%_1, %input.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.13 : Tensor = prim::CallMethod[name="forward"](%_2, %input.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.17 : Tensor = prim::CallMethod[name="forward"](%_3, %input.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.21 : Tensor = prim::CallMethod[name="forward"](%_4, %input.17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.25 : Tensor = prim::CallMethod[name="forward"](%_5, %input.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            return (%input.25)
                      
                        }
                        method __len__ {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_371.Sequential):
                            %1 : int = prim::Constant[value=6]() # <string>:2:10
                            return (%1)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_368.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 512
                            out_channels = 1024
                            stride = 2
                            shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_364.Conv2d object at 000001B3A05E6570>
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_365.Conv2d object at 000001B3A057D600>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A055B700>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A0562C80>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_368.BottleneckBlock,
                                    %x.1 : Tensor):
                                %23 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_365.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_364.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                %shortcut.5 : Tensor = prim::CallMethod[name="forward"](%shortcut.3, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:204:23
                                %out.21 : Tensor = aten::add_(%out.17, %shortcut.5, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_364.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05F9070>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_364.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_365.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A055BB00>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_365.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0562700>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057A900>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 1024
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d object at 000001B3A055B080>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A05EB770>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A05FBEF0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0562480>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05FC470>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05D0FF0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 1024
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d object at 000001B3A05EDAF0>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A055CF00>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A0565100>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05FF2F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0564480>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057B480>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 1024
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d object at 000001B3A055B780>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A05F6E70>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A05C3270>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0564600>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05C3970>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05E5A70>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 1024
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d object at 000001B3A05F78F0>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A055DE80>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A056F380>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05CF0F0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0570380>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057F580>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 1024
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d object at 000001B3A055F200>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d object at 000001B3A05FC0F0>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d object at 000001B3A05D2DF0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_370.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0573600>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_369.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05D2BF0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_366.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 256
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05F0FF0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_367.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 1024
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.torch.nn.modules.container.___torch_mangle_379.Sequential {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_376.BottleneckBlock object at 000001B3A05F7A70>
                        1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock object at 000001B3A057E800>
                        2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock object at 000001B3A05F1970>
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_379.Sequential,
                                %input.1 : Tensor):
                            %_0 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_376.BottleneckBlock = prim::GetAttr[name="0"](%self)
                            %_1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock = prim::GetAttr[name="1"](%self)
                            %_2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock = prim::GetAttr[name="2"](%self)
                            %input.5 : Tensor = prim::CallMethod[name="forward"](%_0, %input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.9 : Tensor = prim::CallMethod[name="forward"](%_1, %input.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            %input.13 : Tensor = prim::CallMethod[name="forward"](%_2, %input.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\container.py:141:20
                            return (%input.13)
                      
                        }
                        method __len__ {
                          graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_379.Sequential):
                            %1 : int = prim::Constant[value=3]() # <string>:2:10
                            return (%1)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_376.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 1024
                            out_channels = 2048
                            stride = 2
                            shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_372.Conv2d object at 000001B3A05CDC70>
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_373.Conv2d object at 000001B3A0572300>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d object at 000001B3A0540A00>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d object at 000001B3A0560B00>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_376.BottleneckBlock,
                                    %x.1 : Tensor):
                                %23 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_373.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_372.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                %shortcut.5 : Tensor = prim::CallMethod[name="forward"](%shortcut.3, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:204:23
                                %out.21 : Tensor = aten::add_(%out.17, %shortcut.5, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_372.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05EE170>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_372.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 2048
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_373.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A053FF80>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_373.Conv2d,
                                        %x.1 : Tensor):
                                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:66
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0560400>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A057BA80>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 2048
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 2048
                            out_channels = 2048
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d object at 000001B3A055E480>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d object at 000001B3A0394A60>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d object at 000001B3A05CED70>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0578600>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A039F6E0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05EBC70>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 2048
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            in_channels = 2048
                            out_channels = 2048
                            stride = 1
                            shortcut = None
                            conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d object at 000001B3A05C5D70>
                            conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d object at 000001B3A056FA80>
                            conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d object at 000001B3A0546200>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_378.BottleneckBlock,
                                    %x.1 : Tensor):
                                %21 : int = prim::Constant[value=1]()
                                %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d = prim::GetAttr[name="conv1"](%self)
                                %out.1 : Tensor = prim::CallMethod[name="forward"](%conv1, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:195:14
                                %out.5 : Tensor = aten::relu_(%out.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:196:14
                                %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d = prim::GetAttr[name="conv2"](%self)
                                %out.9 : Tensor = prim::CallMethod[name="forward"](%conv2, %out.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:198:14
                                %out.13 : Tensor = aten::relu_(%out.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:199:14
                                %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d = prim::GetAttr[name="conv3"](%self)
                                %out.17 : Tensor = prim::CallMethod[name="forward"](%conv3, %out.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:201:14
                                %out.21 : Tensor = aten::add_(%out.17, %x.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:208:8
                                %out.25 : Tensor = aten::relu_(%out.21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\backbone\resnet.py:209:14
                                return (%out.25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A05E5DF0>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_377.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [1, 1, 1, 1]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0546980>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_374.Conv2d,
                                        %x.1 : Tensor):
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%8, %8)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 512
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                            module __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d {
                              parameters {
                                weight = ...
                              }
                              attributes {
                                weight = ...
                                bias = None
                                training = False
                                _is_full_backward_hook = None
                                transposed = False
                                _reversed_padding_repeated_twice = [0, 0, 0, 0]
                                activation = None
                                norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d object at 000001B3A0563380>
                              }
                              methods {
                                method forward {
                                  graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_375.Conv2d,
                                        %x.1 : Tensor):
                                    %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                                    %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                                    %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                    %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                    %20 : int[] = prim::ListConstruct(%8, %8)
                                    %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                                    %norm : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                    %x.9 : Tensor = prim::CallMethod[name="forward"](%norm, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:110:16
                                    return (%x.9)
                              
                                }
                              }
                              submodules {
                                module __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d {
                                  parameters {
                                  }
                                  attributes {
                                    weight = ...
                                    bias = ...
                                    running_mean = ...
                                    running_var = ...
                                    _is_full_backward_hook = None
                                    num_features = 2048
                                    eps = 1.0000000000000001e-05
                                  }
                                  methods {
                                    method forward {
                                      graph(%self : __torch__.detectron2.layers.batch_norm.___torch_mangle_346.FrozenBatchNorm2d,
                                            %x.1 : Tensor):
                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                        %36 : NoneType = prim::Constant()
                                        %34 : bool = prim::Constant[value=0]()
                                        %21 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:37
                                        %19 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:34
                                        %3 : bool = prim::requires_grad(%x.1)
                                        %65 : Tensor = prim::If(%3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:45:8
                                          block0():
                                            %weight.1 : Tensor = prim::GetAttr[name="weight"](%self)
                                            %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %eps.1 : float = prim::GetAttr[name="eps"](%self)
                                            %9 : Tensor = aten::add(%running_var.1, %eps.1, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %10 : Tensor = aten::rsqrt(%9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:35
                                            %scale.1 : Tensor = aten::mul(%weight.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:48:20
                                            %bias.1 : Tensor = prim::GetAttr[name="bias"](%self)
                                            %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %15 : Tensor = aten::mul(%running_mean.1, %scale.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:31
                                            %bias.3 : Tensor = aten::sub(%bias.1, %15, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:49:19
                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %scale.7 : Tensor = aten::reshape(%scale.1, %22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:50:20
                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                            %bias.7 : Tensor = aten::reshape(%bias.3, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:51:19
                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                            %37 : Tensor = aten::to(%scale.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:23
                                            %38 : Tensor = aten::mul(%x.1, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            %44 : Tensor = aten::to(%bias.7, %out_dtype.1, %34, %34, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:45
                                            %46 : Tensor = aten::add(%38, %44, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:53:19
                                            -> (%46)
                                          block1():
                                            %running_mean : Tensor = prim::GetAttr[name="running_mean"](%self)
                                            %running_var : Tensor = prim::GetAttr[name="running_var"](%self)
                                            %weight : Tensor = prim::GetAttr[name="weight"](%self)
                                            %bias : Tensor = prim::GetAttr[name="bias"](%self)
                                            %eps : float = prim::GetAttr[name="eps"](%self)
                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %running_mean, %running_var, %weight, %bias, %34, %54, %eps) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\batch_norm.py:57:19
                                            -> (%56)
                                        return (%65)
                                  
                                    }
                                  }
                                  submodules {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            module __torch__.torch.nn.modules.container.___torch_mangle_386.ModuleList {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                0 = <__torch__.detectron2.layers.wrappers.___torch_mangle_382.Conv2d object at 000001B3A03A51E0>
                1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_383.Conv2d object at 000001B3A0398560>
                2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_384.Conv2d object at 000001B3A03B0560>
                3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_385.Conv2d object at 000001B3A039DE60>
              }
              methods {
                method __len__ {
                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_386.ModuleList):
                    %1 : int = prim::Constant[value=4]() # <string>:2:10
                    return (%1)
              
                }
              }
              submodules {
                module __torch__.detectron2.layers.wrappers.___torch_mangle_382.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_382.Conv2d,
                            %x.1 : Tensor):
                        %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%11, %11)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_383.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_383.Conv2d,
                            %x.1 : Tensor):
                        %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%11, %11)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_384.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_384.Conv2d,
                            %x.1 : Tensor):
                        %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%11, %11)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_385.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_385.Conv2d,
                            %x.1 : Tensor):
                        %11 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:52
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%11, %11)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.torch.nn.modules.container.___torch_mangle_388.ModuleList {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                0 = <__torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d object at 000001B3A0396F60>
                1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d object at 000001B3A03AE360>
                2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d object at 000001B3A03A25E0>
                3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d object at 000001B3A0399A60>
              }
              methods {
                method __len__ {
                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_388.ModuleList):
                    %1 : int = prim::Constant[value=4]() # <string>:2:10
                    return (%1)
              
                }
              }
              submodules {
                module __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [1, 1, 1, 1]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d,
                            %x.1 : Tensor):
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%8, %8)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [1, 1, 1, 1]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d,
                            %x.1 : Tensor):
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%8, %8)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [1, 1, 1, 1]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d,
                            %x.1 : Tensor):
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%8, %8)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [1, 1, 1, 1]
                    norm = None
                    activation = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_387.Conv2d,
                            %x.1 : Tensor):
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%8, %8)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        return (%x.5)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN {
          parameters {
          }
          attributes {
            _is_full_backward_hook = None
            in_features = [p2, p3, p4, p5, p6]
            anchor_matcher = <__torch__.detectron2.modeling.matcher.Matcher object at 000001B3A1200470>
            box2box_transform = <__torch__.detectron2.modeling.box_regression.Box2BoxTransform object at 000001B3A12004F0>
            batch_size_per_image = 256
            positive_fraction = 0.5
            pre_nms_topk = {True: 2000, False: 1000}
            post_nms_topk = {True: 1000, False: 1000}
            nms_thresh = 0.69999999999999996
            min_box_size = 0.
            anchor_boundary_thresh = -1
            loss_weight = {loss_rpn_cls: 1., loss_rpn_loc: 1.}
            box_reg_loss_type = smooth_l1
            smooth_l1_beta = 0.
            rpn_head = <__torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_394.StandardRPNHead object at 000001B3A1200770>
            anchor_generator = <__torch__.detectron2.modeling.anchor_generator.___torch_mangle_396.DefaultAnchorGenerator object at 000001B3C5A2B1F0>
          }
          methods {
            method forward {
              graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN,
                    %images.1 : __torch__.detectron2.structures.image_list.ImageList,
                    %features.1 : Dict(str, Tensor),
                    %gt_instances : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]?):
                %56 : int = prim::Constant[value=-2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:74
                %36 : int = prim::Constant[value=-1]()
                %8 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:19
                %30 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:26
                %31 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:29
                %32 : int = prim::Constant[value=3]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:32
                %33 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:35
                %65 : int = prim::Constant[value=4]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:464:27
                %features.5 : Tensor[] = prim::ListConstruct()
                %in_features : str[] = prim::GetAttr[name="in_features"](%self)
                %7 : int = aten::len(%in_features) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:19
                 = prim::Loop(%7, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:19
                  block0(%9 : int):
                    %f.1 : str = aten::__getitem__(%in_features, %9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:19
                    %13 : Tensor = aten::__getitem__(%features.1, %f.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:20
                    %14 : Tensor[] = aten::append(%features.5, %13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:451:19
                    -> (%8)
                %anchor_generator.1 : __torch__.detectron2.modeling.anchor_generator.___torch_mangle_396.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%self)
                %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[] = prim::CallMethod[name="forward"](%anchor_generator.1, %features.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:452:18
                %rpn_head : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_394.StandardRPNHead = prim::GetAttr[name="rpn_head"](%self)
                %20 : (Tensor[], Tensor[]) = prim::CallMethod[name="forward"](%rpn_head, %features.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:454:53
                %pred_objectness_logits.1 : Tensor[], %pred_anchor_deltas.1 : Tensor[] = prim::TupleUnpack(%20)
                %pred_objectness_logits.5 : Tensor[] = prim::ListConstruct()
                %25 : int = aten::len(%pred_objectness_logits.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:456:33
                 = prim::Loop(%25, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:456:33
                  block0(%27 : int):
                    %score.1 : Tensor = aten::__getitem__(%pred_objectness_logits.1, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:456:33
                    %34 : int[] = prim::ListConstruct(%30, %31, %32, %33)
                    %35 : Tensor = aten::permute(%score.1, %34) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:12
                    %37 : Tensor = aten::flatten(%35, %33, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:458:12
                    %38 : Tensor[] = aten::append(%pred_objectness_logits.5, %37) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:456:33
                    -> (%8)
                %pred_anchor_deltas.5 : Tensor[] = prim::ListConstruct()
                %41 : int = aten::len(%pred_anchor_deltas.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:461:29
                 = prim::Loop(%41, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:461:29
                  block0(%43 : int):
                    %x.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %43) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:461:29
                    %47 : int[] = aten::size(%x.1) # <string>:13:9
                    %48 : int = aten::__getitem__(%47, %30) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:19
                    %54 : int[] = aten::size(%x.1) # <string>:13:9
                    %57 : int = aten::__getitem__(%54, %56) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:66
                    %59 : int[] = aten::size(%x.1) # <string>:13:9
                    %62 : int = aten::__getitem__(%59, %36) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:79
                    %63 : int[] = prim::ListConstruct(%48, %36, %65, %57, %62)
                    %64 : Tensor = aten::view(%x.1, %63) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:12
                    %66 : int[] = prim::ListConstruct(%30, %32, %65, %33, %31)
                    %67 : Tensor = aten::permute(%64, %66) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:12
                    %70 : Tensor = aten::flatten(%67, %33, %56) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:463:12
                    %71 : Tensor[] = aten::append(%pred_anchor_deltas.5, %70) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:461:29
                    -> (%8)
                %losses.1 : Dict(str, Tensor) = prim::DictConstruct()
                %image_sizes : (int, int)[] = prim::GetAttr[name="image_sizes"](%images.1)
                %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="predict_proposals"](%self, %anchors.1, %pred_objectness_logits.5, %pred_anchor_deltas.5, %image_sizes) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:477:20
                %83 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Dict(str, Tensor)) = prim::TupleConstruct(%proposals.1, %losses.1)
                return (%83)
          
            }
            method predict_proposals {
              graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN,
                    %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[],
                    %pred_objectness_logits.1 : Tensor[],
                    %pred_anchor_deltas.1 : Tensor[],
                    %image_sizes.1 : (int, int)[]):
                %24 : Function = prim::Constant[name="find_top_rpn_proposals"]()
                %17 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:508:34
                %6 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject()
                %7 : NoneType = prim::CallMethod[name="__init__"](%6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:501:13
                %8 : NoneType = prim::Enter(%6)
                %pred_proposals.1 : Tensor[] = prim::CallMethod[name="_decode_proposals"](%self, %anchors.1, %pred_anchor_deltas.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:502:29
                %nms_thresh : float = prim::GetAttr[name="nms_thresh"](%self)
                %pre_nms_topk : Dict(bool, int) = prim::GetAttr[name="pre_nms_topk"](%self)
                %18 : int = aten::__getitem__(%pre_nms_topk, %17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:508:16
                %post_nms_topk : Dict(bool, int) = prim::GetAttr[name="post_nms_topk"](%self)
                %21 : int = aten::__getitem__(%post_nms_topk, %17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:509:16
                %min_box_size : float = prim::GetAttr[name="min_box_size"](%self)
                %25 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallFunction(%24, %pred_proposals.1, %pred_objectness_logits.1, %image_sizes.1, %nms_thresh, %18, %21, %min_box_size, %17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:503:19
                %26 : Tensor = prim::Exit(%6)
                return (%25)
          
            }
            method _decode_proposals {
              graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_397.RPN,
                    %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[],
                    %pred_anchor_deltas.1 : Tensor[]):
                %40 : bool = prim::Constant[value=0]()
                %27 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:527:64
                %16 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                %5 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:522:31
                %23 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:526:38
                %6 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:522:12
                %7 : int[] = aten::size(%6) # <string>:13:9
                %N.1 : int = aten::__getitem__(%7, %5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:522:12
                %proposals.1 : Tensor[] = prim::ListConstruct()
                %12 : int = aten::len(%anchors.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                %13 : int = aten::len(%pred_anchor_deltas.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                %14 : int[] = prim::ListConstruct(%12, %13)
                %15 : int = prim::min(%14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                 = prim::Loop(%15, %16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                  block0(%17 : int):
                    %anchors_i.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%anchors.1, %17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                    %pred_anchor_deltas_i.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:525:8
                    %tensor.1 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
                    %B.1 : int = aten::size(%tensor.1, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:526:16
                    %29 : int[] = prim::ListConstruct(%27, %B.1)
                    %pred_anchor_deltas_i.5 : Tensor = aten::reshape(%pred_anchor_deltas_i.1, %29) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:527:35
                    %tensor : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
                    %33 : Tensor = aten::unsqueeze(%tensor, %5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:529:24
                    %39 : int[] = prim::ListConstruct(%N.1, %27, %27)
                    %41 : Tensor = aten::expand(%33, %39, %40) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:529:24
                    %45 : int[] = prim::ListConstruct(%27, %B.1)
                    %anchors_i.7 : Tensor = aten::reshape(%41, %45) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:529:24
                    %box2box_transform : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%self)
                    %proposals_i.1 : Tensor = prim::CallMethod[name="apply_deltas"](%box2box_transform, %pred_anchor_deltas_i.5, %anchors_i.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:530:26
                    %57 : int[] = prim::ListConstruct(%N.1, %27, %B.1)
                    %58 : Tensor = aten::view(%proposals_i.1, %57) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:532:29
                    %59 : Tensor[] = aten::append(%proposals.1, %58) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:532:12
                    -> (%16)
                return (%proposals.1)
          
            }
          }
          submodules {
            module __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_394.StandardRPNHead {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                conv = <__torch__.detectron2.layers.wrappers.___torch_mangle_391.Conv2d object at 000001B3A11C3DF0>
                objectness_logits = <__torch__.torch.nn.modules.conv.___torch_mangle_392.Conv2d object at 000001B3A11ECD70>
                anchor_deltas = <__torch__.torch.nn.modules.conv.___torch_mangle_393.Conv2d object at 000001B3C5A296F0>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.___torch_mangle_394.StandardRPNHead,
                        %features.1 : Tensor[]):
                    %7 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:173:8
                    %pred_objectness_logits.1 : Tensor[] = prim::ListConstruct()
                    %pred_anchor_deltas.1 : Tensor[] = prim::ListConstruct()
                    %6 : int = aten::len(%features.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:173:8
                     = prim::Loop(%6, %7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:173:8
                      block0(%8 : int):
                        %x.1 : Tensor = aten::__getitem__(%features.1, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:173:8
                        %conv : __torch__.detectron2.layers.wrappers.___torch_mangle_391.Conv2d = prim::GetAttr[name="conv"](%self)
                        %t.1 : Tensor = prim::CallMethod[name="forward"](%conv, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:174:16
                        %objectness_logits : __torch__.torch.nn.modules.conv.___torch_mangle_392.Conv2d = prim::GetAttr[name="objectness_logits"](%self)
                        %16 : Tensor = prim::CallMethod[name="forward"](%objectness_logits, %t.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:175:42
                        %17 : Tensor[] = aten::append(%pred_objectness_logits.1, %16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:175:12
                        %anchor_deltas : __torch__.torch.nn.modules.conv.___torch_mangle_393.Conv2d = prim::GetAttr[name="anchor_deltas"](%self)
                        %21 : Tensor = prim::CallMethod[name="forward"](%anchor_deltas, %t.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:176:38
                        %22 : Tensor[] = aten::append(%pred_anchor_deltas.1, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\proposal_generator\rpn.py:176:12
                        -> (%7)
                    %25 : (Tensor[], Tensor[]) = prim::TupleConstruct(%pred_objectness_logits.1, %pred_anchor_deltas.1)
                    return (%25)
              
                }
              }
              submodules {
                module __torch__.detectron2.layers.wrappers.___torch_mangle_391.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [1, 1, 1, 1]
                    norm = None
                    activation = <__torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU object at 000001B3A11ED070>
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_391.Conv2d,
                            %x.1 : Tensor):
                        %8 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:107:39
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %18 : int[] = prim::ListConstruct(%8, %8)
                        %19 : int[] = prim::ListConstruct(%8, %8)
                        %20 : int[] = prim::ListConstruct(%8, %8)
                        %x.5 : Tensor = aten::conv2d(%x.1, %weight, %bias, %18, %19, %20, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:106:12
                        %activation : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU = prim::GetAttr[name="activation"](%self)
                        %x.9 : Tensor = prim::CallMethod[name="forward"](%activation, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\wrappers.py:112:16
                        return (%x.9)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU,
                                %input.1 : Tensor):
                            %4 : Function = prim::Constant[name="relu"]()
                            %3 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:37
                            %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:15
                            return (%5)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.conv.___torch_mangle_392.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_392.Conv2d,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = prim::CallMethod[name="_conv_forward"](%self, %input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:447:15
                        return (%5)
                  
                    }
                    method _conv_forward {
                      graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_392.Conv2d,
                            %input.1 : Tensor,
                            %weight.1 : Tensor,
                            %bias.1 : Tensor?):
                        %61 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:444:24
                        %58 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:443:45
                        %68 : int[] = prim::ListConstruct(%58, %58)
                        %69 : int[] = prim::ListConstruct(%61, %61)
                        %70 : int[] = prim::ListConstruct(%58, %58)
                        %71 : Tensor = aten::conv2d(%input.1, %weight.1, %bias.1, %68, %69, %70, %58) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:443:15
                        return (%71)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.conv.___torch_mangle_393.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    transposed = False
                    _reversed_padding_repeated_twice = [0, 0, 0, 0]
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_393.Conv2d,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor? = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = prim::CallMethod[name="_conv_forward"](%self, %input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:447:15
                        return (%5)
                  
                    }
                    method _conv_forward {
                      graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_393.Conv2d,
                            %input.1 : Tensor,
                            %weight.1 : Tensor,
                            %bias.1 : Tensor?):
                        %61 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:444:24
                        %58 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:443:45
                        %68 : int[] = prim::ListConstruct(%58, %58)
                        %69 : int[] = prim::ListConstruct(%61, %61)
                        %70 : int[] = prim::ListConstruct(%58, %58)
                        %71 : Tensor = aten::conv2d(%input.1, %weight.1, %bias.1, %68, %69, %70, %58) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\conv.py:443:15
                        return (%71)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.anchor_generator.___torch_mangle_396.DefaultAnchorGenerator {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                strides = [4, 8, 16, 32, 64]
                num_features = 5
                offset = 0.
                cell_anchors = <__torch__.detectron2.modeling.anchor_generator.___torch_mangle_395.BufferList object at 000001B3C5A2DA70>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.anchor_generator.___torch_mangle_396.DefaultAnchorGenerator,
                        %features.1 : Tensor[]):
                    %15 : NoneType = prim::Constant()
                    %14 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:22
                    %13 : int = prim::Constant[value=-2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:40
                    %6 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:21
                    %grid_sizes.1 : int[][] = prim::ListConstruct()
                    %5 : int = aten::len(%features.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:21
                     = prim::Loop(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:21
                      block0(%7 : int):
                        %feature_map.1 : Tensor = aten::__getitem__(%features.1, %7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:21
                        %10 : int[] = aten::size(%feature_map.1) # <string>:13:9
                        %16 : int[] = aten::slice(%10, %13, %15, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:22
                        %17 : int[][] = aten::append(%grid_sizes.1, %16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:225:21
                        -> (%6)
                    %anchors_over_all_feature_maps.1 : Tensor[] = prim::CallMethod[name="_grid_anchors"](%self, %grid_sizes.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:226:40
                    %20 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
                    %22 : int = aten::len(%anchors_over_all_feature_maps.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:227:15
                     = prim::Loop(%22, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:227:15
                      block0(%24 : int):
                        %x.1 : Tensor = aten::__getitem__(%anchors_over_all_feature_maps.1, %24) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:227:15
                        %27 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
                        %28 : NoneType = prim::CallMethod[name="__init__"](%27, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:227:16
                        %29 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%20, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:227:15
                        -> (%6)
                    return (%20)
              
                }
                method _grid_anchors {
                  graph(%self : __torch__.detectron2.modeling.anchor_generator.___torch_mangle_396.DefaultAnchorGenerator,
                        %grid_sizes.1 : int[][]):
                    %79 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:40
                    %65 : Function = prim::Constant[name="_create_grid_offsets"]()
                    %54 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                    %23 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:41
                    %41 : int = prim::Constant[value=4]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %anchors.1 : Tensor[] = prim::ListConstruct()
                    %buffers.1 : Tensor[] = prim::ListConstruct()
                    %cell_anchors : __torch__.detectron2.modeling.anchor_generator.___torch_mangle_395.BufferList = prim::GetAttr[name="cell_anchors"](%self)
                    %_0 : Tensor = prim::GetAttr[name="0"](%cell_anchors)
                    %_1 : Tensor = prim::GetAttr[name="1"](%cell_anchors)
                    %_2 : Tensor = prim::GetAttr[name="2"](%cell_anchors)
                    %_3 : Tensor = prim::GetAttr[name="3"](%cell_anchors)
                    %_4 : Tensor = prim::GetAttr[name="4"](%cell_anchors)
                    %26 : Tensor[] = aten::append(%buffers.1, %_0) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %30 : Tensor[] = aten::append(%buffers.1, %_1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %35 : Tensor[] = aten::append(%buffers.1, %_2) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %40 : Tensor[] = aten::append(%buffers.1, %_3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %45 : Tensor[] = aten::append(%buffers.1, %_4) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:168:38
                    %strides : int[] = prim::GetAttr[name="strides"](%self)
                    %49 : int = aten::len(%grid_sizes.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                    %50 : int = aten::len(%strides) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                    %51 : int = aten::len(%buffers.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                    %52 : int[] = prim::ListConstruct(%49, %50, %51)
                    %53 : int = prim::min(%52) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                     = prim::Loop(%53, %54) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                      block0(%55 : int):
                        %size.1 : int[] = aten::__getitem__(%grid_sizes.1, %55) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                        %stride.1 : int = aten::__getitem__(%strides, %55) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                        %base_anchors.1 : Tensor = aten::__getitem__(%buffers.1, %55) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:169:8
                        %offset : float = prim::GetAttr[name="offset"](%self)
                        %64 : Device = prim::device(%base_anchors.1)
                        %66 : (Tensor, Tensor) = prim::CallFunction(%65, %size.1, %stride.1, %offset, %64) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:170:31
                        %shift_x.1 : Tensor, %shift_y.1 : Tensor = prim::TupleUnpack(%66)
                        %74 : Tensor[] = prim::ListConstruct(%shift_x.1, %shift_y.1, %shift_x.1, %shift_y.1)
                        %shifts.1 : Tensor = aten::stack(%74, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:171:21
                        %80 : int[] = prim::ListConstruct(%79, %23, %41)
                        %81 : Tensor = aten::view(%shifts.1, %80) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:28
                        %85 : int[] = prim::ListConstruct(%23, %79, %41)
                        %86 : Tensor = aten::view(%base_anchors.1, %85) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:52
                        %88 : Tensor = aten::add(%81, %86, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:28
                        %91 : int[] = prim::ListConstruct(%79, %41)
                        %92 : Tensor = aten::reshape(%88, %91) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:28
                        %93 : Tensor[] = aten::append(%anchors.1, %92) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\anchor_generator.py:173:12
                        -> (%54)
                    return (%anchors.1)
              
                }
              }
              submodules {
                module __torch__.detectron2.modeling.anchor_generator.___torch_mangle_395.BufferList {
                  parameters {
                  }
                  attributes {
                    0 = ...
                    1 = ...
                    2 = ...
                    3 = ...
                    4 = ...
                    _is_full_backward_hook = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads {
          parameters {
          }
          attributes {
            _is_full_backward_hook = None
            batch_size_per_image = 512
            positive_fraction = 0.25
            num_classes = 1
            proposal_matcher = <__torch__.detectron2.modeling.matcher.Matcher object at 000001B3A11ED270>
            proposal_append_gt = True
            in_features = [p2, p3, p4, p5]
            box_in_features = [p2, p3, p4, p5]
            train_on_pred_boxes = False
            box_pooler = <__torch__.detectron2.modeling.poolers.___torch_mangle_400.ROIPooler object at 000001B3A11EE870>
            box_head = <__torch__.detectron2.modeling.roi_heads.box_head.___torch_mangle_404.FastRCNNConvFCHead object at 000001B3C5A2E2F0>
            box_predictor = <__torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers object at 000001B3C5A36570>
          }
          methods {
            method forward {
              graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads,
                    %images : __torch__.detectron2.structures.image_list.ImageList,
                    %features.1 : Dict(str, Tensor),
                    %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[],
                    %targets : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]?):
                %pred_instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="_forward_box"](%self, %features.1, %proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:747:29
                %pred_instances.5 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="forward_with_given_boxes"](%self, %features.1, %pred_instances.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:750:29
                %17 : Dict(str, Tensor) = prim::DictConstruct()
                %18 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Dict(str, Tensor)) = prim::TupleConstruct(%pred_instances.5, %17)
                return (%18)
          
            }
            method _forward_box {
              graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads,
                    %features.1 : Dict(str, Tensor),
                    %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                %7 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:19
                %features.5 : Tensor[] = prim::ListConstruct()
                %box_in_features : str[] = prim::GetAttr[name="box_in_features"](%self)
                %6 : int = aten::len(%box_in_features) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:19
                 = prim::Loop(%6, %7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:19
                  block0(%8 : int):
                    %f.1 : str = aten::__getitem__(%box_in_features, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:19
                    %12 : Tensor = aten::__getitem__(%features.1, %f.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:20
                    %13 : Tensor[] = aten::append(%features.5, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:797:19
                    -> (%7)
                %box_pooler : __torch__.detectron2.modeling.poolers.___torch_mangle_400.ROIPooler = prim::GetAttr[name="box_pooler"](%self)
                %16 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
                %18 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:49
                 = prim::Loop(%18, %7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:49
                  block0(%20 : int):
                    %x.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%proposals.1, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:49
                    %23 : __torch__.detectron2.structures.boxes.Boxes = prim::CallMethod[name="__proposal_boxes_getter"](%x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:50
                    %24 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%16, %23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:49
                    -> (%7)
                %box_features.1 : Tensor = prim::CallMethod[name="forward"](%box_pooler, %features.5, %16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:798:23
                %box_head : __torch__.detectron2.modeling.roi_heads.box_head.___torch_mangle_404.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%self)
                %box_features.5 : Tensor = prim::CallMethod[name="forward"](%box_head, %box_features.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:799:23
                %box_predictor.1 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%self)
                %predictions.1 : (Tensor, Tensor) = prim::CallMethod[name="forward"](%box_predictor.1, %box_features.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:800:22
                %box_predictor : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%self)
                %37 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Tensor[]) = prim::CallMethod[name="inference"](%box_predictor, %predictions.1, %proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:815:32
                %pred_instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], %39 : Tensor[] = prim::TupleUnpack(%37)
                return (%pred_instances.1)
          
            }
            method forward_with_given_boxes {
              graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads,
                    %features.1 : Dict(str, Tensor),
                    %instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                %27 : NoneType = prim::Constant()
                %45 : str = prim::Constant[value="AssertionError: "]()
                %22 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:15
                %19 : str = prim::Constant[value="pred_classes"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:67
                %12 : str = prim::Constant[value="pred_boxes"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:32
                %8 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:25
                %11 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%instances.1, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:15
                %13 : bool = prim::CallMethod[name="has"](%11, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:15
                %23 : bool = prim::If(%13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:15
                  block0():
                    %18 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%instances.1, %8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:50
                    %20 : bool = prim::CallMethod[name="has"](%18, %19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:50
                    -> (%20)
                  block1():
                    -> (%22)
                 = prim::If(%23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%45, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:774:8
                    -> ()
                %instances.13 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="_forward_mask"](%self, %features.1, %instances.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:776:20
                %instances.17 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[] = prim::CallMethod[name="_forward_keypoint"](%self, %features.1, %instances.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\roi_heads.py:777:20
                return (%instances.17)
          
            }
            method _forward_mask {
              graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads,
                    %features : Dict(str, Tensor),
                    %instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                return (%instances.1)
          
            }
            method _forward_keypoint {
              graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.___torch_mangle_408.StandardROIHeads,
                    %features : Dict(str, Tensor),
                    %instances.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                return (%instances.1)
          
            }
          }
          submodules {
            module __torch__.detectron2.modeling.poolers.___torch_mangle_400.ROIPooler {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                output_size = (7, 7)
                min_level = 2
                max_level = 5
                canonical_level = 4
                canonical_box_size = 224
                level_poolers = <__torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList object at 000001B3C5A2FAF0>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.poolers.___torch_mangle_400.ROIPooler,
                        %x.1 : Tensor[],
                        %box_lists.1 : __torch__.detectron2.structures.boxes.Boxes[]):
                    %404 : bool = prim::Constant[value=0]()
                    %395 : Function = prim::Constant[name="nonzero_tuple"]()
                    %364 : Function = prim::Constant[name="assign_boxes_to_levels"]()
                    %257 : Function = prim::Constant[name="convert_boxes_to_pooler_format"]()
                    %41 : str = prim::Constant[value="unequal value, x[0] batch dim 0 is {}, but box_list has length {}"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:213:11
                    %31 : NoneType = prim::Constant()
                    %29 : str = prim::Constant[value="AssertionError: "]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:205:8
                    %24 : str = prim::Constant[value="unequal value, num_level_assignments={}, but x is list of {} Tensors"]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:207:11
                    %level.1 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:35
                    %level.7 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:218:31
                    %level.13 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:239:8
                    %level.19 : int = prim::Constant[value=3]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:239:8
                    %level_poolers.1 : __torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                    %num_level_assignments.1 : int = prim::CallMethod[name="__len__"](%level_poolers.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:200:32
                    %x.7 : Tensor[] = prim::unchecked_cast(%x.1)
                    %x.13 : Tensor[] = prim::unchecked_cast(%x.7)
                    %box_lists.7 : __torch__.detectron2.structures.boxes.Boxes[] = prim::unchecked_cast(%box_lists.1)
                    %20 : int = aten::len(%x.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:206:12
                    %22 : bool = aten::eq(%20, %num_level_assignments.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:206:12
                     = prim::If(%22) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:205:8
                      block0():
                        -> ()
                      block1():
                        %27 : int = aten::len(%x.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:208:35
                        %28 : str = aten::format(%24, %num_level_assignments.1, %27) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:207:11
                        %30 : str = aten::add(%29, %28) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:205:8
                         = prim::RaiseException(%30, %31) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:205:8
                        -> ()
                    %34 : int = aten::len(%box_lists.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:15
                    %37 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:33
                    %38 : int = aten::size(%37, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:33
                    %39 : bool = aten::eq(%34, %38) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:15
                     = prim::If(%39) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:8
                      block0():
                        -> ()
                      block1():
                        %43 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:214:12
                        %44 : int = aten::size(%43, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:214:12
                        %46 : int = aten::len(%box_lists.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:214:26
                        %47 : str = aten::format(%41, %44, %46) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:213:11
                        %49 : str = aten::add(%29, %47) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:8
                         = prim::RaiseException(%49, %31) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:211:8
                        -> ()
                    %53 : int = aten::len(%box_lists.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:216:11
                    %54 : bool = aten::eq(%53, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:216:11
                    %359 : Tensor = prim::If(%54) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:216:8
                      block0():
                        %57 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:218:20
                        %58 : int[] = aten::size(%57) # <string>:13:9
                        %60 : int = aten::__getitem__(%58, %level.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:218:20
                        %output_size.1 : (int, int) = prim::GetAttr[name="output_size"](%self)
                        %63 : int, %64 : int = prim::TupleUnpack(%output_size.1)
                        %67 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:218:62
                        %68 : Device = prim::device(%67)
                        %70 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:218:81
                        %71 : int = prim::dtype(%70)
                        %73 : int[] = prim::ListConstruct(%level.1, %60, %63, %64)
                        %76 : Tensor = aten::zeros(%73, %71, %31, %68, %31) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:217:19
                        -> (%76)
                      block1():
                        %pooler_fmt_boxes.13 : Tensor = prim::CallFunction(%257, %box_lists.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:221:27
                        %259 : bool = aten::eq(%num_level_assignments.1, %level.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:223:11
                        %443 : Tensor = prim::If(%259) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:223:8
                          block0():
                            %level_poolers.5 : __torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                            %_0.3 : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign = prim::GetAttr[name="0"](%level_poolers.5)
                            %272 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:224:41
                            %273 : Tensor = prim::CallMethod[name="forward"](%_0.3, %272, %pooler_fmt_boxes.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:224:19
                            -> (%273)
                          block1():
                            %min_level.5 : int = prim::GetAttr[name="min_level"](%self)
                            %max_level.5 : int = prim::GetAttr[name="max_level"](%self)
                            %canonical_box_size.5 : int = prim::GetAttr[name="canonical_box_size"](%self)
                            %canonical_level.5 : int = prim::GetAttr[name="canonical_level"](%self)
                            %level_assignments.13 : Tensor = prim::CallFunction(%364, %box_lists.7, %min_level.5, %max_level.5, %canonical_box_size.5, %canonical_level.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:226:28
                            %num_boxes.7 : int = aten::size(%pooler_fmt_boxes.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:230:20
                            %367 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:231:23
                            %368 : int[] = aten::size(%367) # <string>:13:9
                            %num_channels.7 : int = aten::__getitem__(%368, %level.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:231:23
                            %output_size.17 : (int, int) = prim::GetAttr[name="output_size"](%self)
                            %output_size.21 : int = prim::TupleIndex(%output_size.17, %level.1)
                            %372 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:234:24
                            %dtype.7 : int = prim::dtype(%372)
                            %374 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:234:36
                            %device.7 : Device = prim::device(%374)
                            %379 : int[] = prim::ListConstruct(%num_boxes.7, %num_channels.7, %output_size.21, %output_size.21)
                            %output.15 : Tensor = aten::zeros(%379, %dtype.7, %31, %device.7, %31) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:235:17
                            %level_poolers.13 : __torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                            %_0.11 : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign = prim::GetAttr[name="0"](%level_poolers.13)
                            %_1.11 : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign = prim::GetAttr[name="1"](%level_poolers.13)
                            %_2.11 : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign = prim::GetAttr[name="2"](%level_poolers.13)
                            %_3.11 : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign = prim::GetAttr[name="3"](%level_poolers.13)
                            %394 : Tensor = aten::eq(%level_assignments.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:33
                            %396 : Tensor[] = prim::CallFunction(%395, %394) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %inds.55 : Tensor = aten::__getitem__(%396, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %398 : Tensor?[] = prim::ListConstruct(%inds.55)
                            %pooler_fmt_boxes_level.31 : Tensor = aten::index(%pooler_fmt_boxes.13, %398) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:241:37
                            %401 : Tensor = aten::__getitem__(%x.13, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:46
                            %402 : Tensor = prim::CallMethod[name="forward"](%_0.11, %401, %pooler_fmt_boxes_level.31) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:39
                            %403 : Tensor?[] = prim::ListConstruct(%inds.55)
                            %405 : Tensor = aten::index_put_(%output.15, %403, %402, %404) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:12
                            %406 : Tensor = aten::eq(%level_assignments.13, %level.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:33
                            %408 : Tensor[] = prim::CallFunction(%395, %406) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %inds.59 : Tensor = aten::__getitem__(%408, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %410 : Tensor?[] = prim::ListConstruct(%inds.59)
                            %pooler_fmt_boxes_level.35 : Tensor = aten::index(%pooler_fmt_boxes.13, %410) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:241:37
                            %413 : Tensor = aten::__getitem__(%x.13, %level.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:46
                            %414 : Tensor = prim::CallMethod[name="forward"](%_1.11, %413, %pooler_fmt_boxes_level.35) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:39
                            %415 : Tensor?[] = prim::ListConstruct(%inds.59)
                            %417 : Tensor = aten::index_put_(%output.15, %415, %414, %404) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:12
                            %418 : Tensor = aten::eq(%level_assignments.13, %level.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:33
                            %420 : Tensor[] = prim::CallFunction(%395, %418) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %inds.63 : Tensor = aten::__getitem__(%420, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %422 : Tensor?[] = prim::ListConstruct(%inds.63)
                            %pooler_fmt_boxes_level.39 : Tensor = aten::index(%pooler_fmt_boxes.13, %422) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:241:37
                            %425 : Tensor = aten::__getitem__(%x.13, %level.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:46
                            %426 : Tensor = prim::CallMethod[name="forward"](%_2.11, %425, %pooler_fmt_boxes_level.39) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:39
                            %427 : Tensor?[] = prim::ListConstruct(%inds.63)
                            %429 : Tensor = aten::index_put_(%output.15, %427, %426, %404) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:12
                            %430 : Tensor = aten::eq(%level_assignments.13, %level.19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:33
                            %432 : Tensor[] = prim::CallFunction(%395, %430) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %inds.67 : Tensor = aten::__getitem__(%432, %level.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:240:19
                            %434 : Tensor?[] = prim::ListConstruct(%inds.67)
                            %pooler_fmt_boxes_level.43 : Tensor = aten::index(%pooler_fmt_boxes.13, %434) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:241:37
                            %437 : Tensor = aten::__getitem__(%x.13, %level.19) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:46
                            %438 : Tensor = prim::CallMethod[name="forward"](%_3.11, %437, %pooler_fmt_boxes_level.43) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:39
                            %439 : Tensor?[] = prim::ListConstruct(%inds.67)
                            %441 : Tensor = aten::index_put_(%output.15, %439, %438, %404) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\poolers.py:243:12
                            -> (%output.15)
                        -> (%443)
                    return (%359)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList {
                  parameters {
                  }
                  attributes {
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign object at 000001B3C5A2EAF0>
                    1 = <__torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign object at 000001B3C5A33270>
                    2 = <__torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign object at 000001B3C5A37D70>
                    3 = <__torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign object at 000001B3C5A39470>
                  }
                  methods {
                    method __len__ {
                      graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_399.ModuleList):
                        %1 : int = prim::Constant[value=4]() # <string>:2:10
                        return (%1)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        output_size = (7, 7)
                        spatial_scale = 0.25
                        sampling_ratio = 0
                        aligned = True
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign,
                                %input.1 : Tensor,
                                %rois.1 : Tensor):
                            %47 : Function = prim::Constant[name="roi_align"]()
                            %20 : NoneType = prim::Constant()
                            %61 : str = prim::Constant[value="AssertionError: "]()
                            %15 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %6 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:29
                            %10 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:45
                            %12 : int = prim::Constant[value=5]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:51
                            %5 : int = aten::dim(%rois.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %7 : bool = aten::eq(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %16 : bool = prim::If(%7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                              block0():
                                %11 : int = aten::size(%rois.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                %13 : bool = aten::eq(%11, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                -> (%13)
                              block1():
                                -> (%15)
                             = prim::If(%16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                              block0():
                                -> ()
                              block1():
                                 = prim::RaiseException(%61, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                                -> ()
                            %23 : bool = prim::is_quantized(%input.1)
                            %input : Tensor = prim::If(%23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:56:8
                              block0():
                                %input.7 : Tensor = aten::dequantize(%input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:57:20
                                -> (%input.7)
                              block1():
                                -> (%input.1)
                            %35 : int = prim::dtype(%input)
                            %39 : Tensor = aten::to(%rois.1, %35, %15, %15, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:60:12
                            %output_size : (int, int) = prim::GetAttr[name="output_size"](%self)
                            %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%self)
                            %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%self)
                            %aligned : bool = prim::GetAttr[name="aligned"](%self)
                            %44 : int, %45 : int = prim::TupleUnpack(%output_size)
                            %46 : int[] = prim::ListConstruct(%44, %45)
                            %48 : Tensor = prim::CallFunction(%47, %input, %39, %46, %spatial_scale, %sampling_ratio, %aligned) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:58:15
                            return (%48)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        output_size = (7, 7)
                        spatial_scale = 0.125
                        sampling_ratio = 0
                        aligned = True
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign,
                                %input.1 : Tensor,
                                %rois.1 : Tensor):
                            %47 : Function = prim::Constant[name="roi_align"]()
                            %20 : NoneType = prim::Constant()
                            %61 : str = prim::Constant[value="AssertionError: "]()
                            %15 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %6 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:29
                            %10 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:45
                            %12 : int = prim::Constant[value=5]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:51
                            %5 : int = aten::dim(%rois.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %7 : bool = aten::eq(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %16 : bool = prim::If(%7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                              block0():
                                %11 : int = aten::size(%rois.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                %13 : bool = aten::eq(%11, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                -> (%13)
                              block1():
                                -> (%15)
                             = prim::If(%16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                              block0():
                                -> ()
                              block1():
                                 = prim::RaiseException(%61, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                                -> ()
                            %23 : bool = prim::is_quantized(%input.1)
                            %input : Tensor = prim::If(%23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:56:8
                              block0():
                                %input.7 : Tensor = aten::dequantize(%input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:57:20
                                -> (%input.7)
                              block1():
                                -> (%input.1)
                            %35 : int = prim::dtype(%input)
                            %39 : Tensor = aten::to(%rois.1, %35, %15, %15, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:60:12
                            %output_size : (int, int) = prim::GetAttr[name="output_size"](%self)
                            %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%self)
                            %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%self)
                            %aligned : bool = prim::GetAttr[name="aligned"](%self)
                            %44 : int, %45 : int = prim::TupleUnpack(%output_size)
                            %46 : int[] = prim::ListConstruct(%44, %45)
                            %48 : Tensor = prim::CallFunction(%47, %input, %39, %46, %spatial_scale, %sampling_ratio, %aligned) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:58:15
                            return (%48)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        output_size = (7, 7)
                        spatial_scale = 0.0625
                        sampling_ratio = 0
                        aligned = True
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign,
                                %input.1 : Tensor,
                                %rois.1 : Tensor):
                            %47 : Function = prim::Constant[name="roi_align"]()
                            %20 : NoneType = prim::Constant()
                            %61 : str = prim::Constant[value="AssertionError: "]()
                            %15 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %6 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:29
                            %10 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:45
                            %12 : int = prim::Constant[value=5]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:51
                            %5 : int = aten::dim(%rois.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %7 : bool = aten::eq(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %16 : bool = prim::If(%7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                              block0():
                                %11 : int = aten::size(%rois.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                %13 : bool = aten::eq(%11, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                -> (%13)
                              block1():
                                -> (%15)
                             = prim::If(%16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                              block0():
                                -> ()
                              block1():
                                 = prim::RaiseException(%61, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                                -> ()
                            %23 : bool = prim::is_quantized(%input.1)
                            %input : Tensor = prim::If(%23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:56:8
                              block0():
                                %input.7 : Tensor = aten::dequantize(%input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:57:20
                                -> (%input.7)
                              block1():
                                -> (%input.1)
                            %35 : int = prim::dtype(%input)
                            %39 : Tensor = aten::to(%rois.1, %35, %15, %15, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:60:12
                            %output_size : (int, int) = prim::GetAttr[name="output_size"](%self)
                            %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%self)
                            %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%self)
                            %aligned : bool = prim::GetAttr[name="aligned"](%self)
                            %44 : int, %45 : int = prim::TupleUnpack(%output_size)
                            %46 : int[] = prim::ListConstruct(%44, %45)
                            %48 : Tensor = prim::CallFunction(%47, %input, %39, %46, %spatial_scale, %sampling_ratio, %aligned) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:58:15
                            return (%48)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign {
                      parameters {
                      }
                      attributes {
                        _is_full_backward_hook = None
                        output_size = (7, 7)
                        spatial_scale = 0.03125
                        sampling_ratio = 0
                        aligned = True
                      }
                      methods {
                        method forward {
                          graph(%self : __torch__.detectron2.layers.roi_align.___torch_mangle_398.ROIAlign,
                                %input.1 : Tensor,
                                %rois.1 : Tensor):
                            %47 : Function = prim::Constant[name="roi_align"]()
                            %20 : NoneType = prim::Constant()
                            %61 : str = prim::Constant[value="AssertionError: "]()
                            %15 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %6 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:29
                            %10 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:45
                            %12 : int = prim::Constant[value=5]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:51
                            %5 : int = aten::dim(%rois.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %7 : bool = aten::eq(%5, %6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                            %16 : bool = prim::If(%7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:15
                              block0():
                                %11 : int = aten::size(%rois.1, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                %13 : bool = aten::eq(%11, %12) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:35
                                -> (%13)
                              block1():
                                -> (%15)
                             = prim::If(%16) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                              block0():
                                -> ()
                              block1():
                                 = prim::RaiseException(%61, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:55:8
                                -> ()
                            %23 : bool = prim::is_quantized(%input.1)
                            %input : Tensor = prim::If(%23) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:56:8
                              block0():
                                %input.7 : Tensor = aten::dequantize(%input.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:57:20
                                -> (%input.7)
                              block1():
                                -> (%input.1)
                            %35 : int = prim::dtype(%input)
                            %39 : Tensor = aten::to(%rois.1, %35, %15, %15, %20) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:60:12
                            %output_size : (int, int) = prim::GetAttr[name="output_size"](%self)
                            %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%self)
                            %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%self)
                            %aligned : bool = prim::GetAttr[name="aligned"](%self)
                            %44 : int, %45 : int = prim::TupleUnpack(%output_size)
                            %46 : int[] = prim::ListConstruct(%44, %45)
                            %48 : Tensor = prim::CallFunction(%47, %input, %39, %46, %spatial_scale, %sampling_ratio, %aligned) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\layers\roi_align.py:58:15
                            return (%48)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.box_head.___torch_mangle_404.FastRCNNConvFCHead {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                _output_size = 1024
                flatten = <__torch__.torch.nn.modules.flatten.___torch_mangle_401.Flatten object at 000001B3C5A31070>
                fc1 = <__torch__.torch.nn.modules.linear.___torch_mangle_402.Linear object at 000001B3C5A31770>
                fc_relu1 = <__torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU object at 000001B3C5A30FF0>
                fc2 = <__torch__.torch.nn.modules.linear.___torch_mangle_403.Linear object at 000001B3C5A31FF0>
                fc_relu2 = <__torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU object at 000001B3C5A322F0>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.box_head.___torch_mangle_404.FastRCNNConvFCHead,
                        %x.1 : Tensor):
                    %flatten : __torch__.torch.nn.modules.flatten.___torch_mangle_401.Flatten = prim::GetAttr[name="flatten"](%self)
                    %fc1 : __torch__.torch.nn.modules.linear.___torch_mangle_402.Linear = prim::GetAttr[name="fc1"](%self)
                    %fc_relu1 : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU = prim::GetAttr[name="fc_relu1"](%self)
                    %fc2 : __torch__.torch.nn.modules.linear.___torch_mangle_403.Linear = prim::GetAttr[name="fc2"](%self)
                    %fc_relu2 : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU = prim::GetAttr[name="fc_relu2"](%self)
                    %x.5 : Tensor = prim::CallMethod[name="forward"](%flatten, %x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\box_head.py:96:16
                    %x.9 : Tensor = prim::CallMethod[name="forward"](%fc1, %x.5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\box_head.py:96:16
                    %x.13 : Tensor = prim::CallMethod[name="forward"](%fc_relu1, %x.9) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\box_head.py:96:16
                    %x.17 : Tensor = prim::CallMethod[name="forward"](%fc2, %x.13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\box_head.py:96:16
                    %x.21 : Tensor = prim::CallMethod[name="forward"](%fc_relu2, %x.17) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\box_head.py:96:16
                    return (%x.21)
              
                }
                method __len__ {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.box_head.___torch_mangle_404.FastRCNNConvFCHead):
                    %1 : int = prim::Constant[value=5]() # <string>:2:10
                    return (%1)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.flatten.___torch_mangle_401.Flatten {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.flatten.___torch_mangle_401.Flatten,
                            %input.1 : Tensor):
                        %4 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\flatten.py:45:45
                        %3 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\flatten.py:45:29
                        %5 : Tensor = aten::flatten(%input.1, %3, %4) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\flatten.py:45:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.___torch_mangle_402.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_402.Linear,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = aten::linear(%input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\linear.py:103:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU,
                            %input.1 : Tensor):
                        %4 : Function = prim::Constant[name="relu"]()
                        %3 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:37
                        %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.___torch_mangle_403.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_403.Linear,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = aten::linear(%input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\linear.py:103:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.activation.___torch_mangle_390.ReLU,
                            %input.1 : Tensor):
                        %4 : Function = prim::Constant[name="relu"]()
                        %3 : bool = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:37
                        %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\activation.py:98:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                num_classes = 1
                box2box_transform = <__torch__.detectron2.modeling.box_regression.Box2BoxTransform object at 000001B3C5A38570>
                smooth_l1_beta = 0.
                test_score_thresh = 0.5
                test_nms_thresh = 0.5
                test_topk_per_image = 100
                box_reg_loss_type = smooth_l1
                loss_weight = {loss_box_reg: 1.}
                cls_score = <__torch__.torch.nn.modules.linear.___torch_mangle_405.Linear object at 000001B3C5A38870>
                bbox_pred = <__torch__.torch.nn.modules.linear.___torch_mangle_406.Linear object at 000001B3C5A31470>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers,
                        %x.1 : Tensor):
                    %10 : int = prim::Constant[value=-1]()
                    %5 : int = prim::Constant[value=2]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:272:21
                    %9 : int = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:273:43
                    %4 : int = aten::dim(%x.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:272:11
                    %6 : bool = aten::gt(%4, %5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:272:11
                    %x : Tensor = prim::If(%6) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:272:8
                      block0():
                        %x.7 : Tensor = aten::flatten(%x.1, %9, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:273:16
                        -> (%x.7)
                      block1():
                        -> (%x.1)
                    %cls_score : __torch__.torch.nn.modules.linear.___torch_mangle_405.Linear = prim::GetAttr[name="cls_score"](%self)
                    %scores.1 : Tensor = prim::CallMethod[name="forward"](%cls_score, %x) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:274:17
                    %bbox_pred : __torch__.torch.nn.modules.linear.___torch_mangle_406.Linear = prim::GetAttr[name="bbox_pred"](%self)
                    %proposal_deltas.1 : Tensor = prim::CallMethod[name="forward"](%bbox_pred, %x) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:275:26
                    %25 : (Tensor, Tensor) = prim::TupleConstruct(%scores.1, %proposal_deltas.1)
                    return (%25)
              
                }
                method inference {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers,
                        %predictions.1 : (Tensor, Tensor),
                        %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                    %25 : Function = prim::Constant[name="fast_rcnn_inference"]()
                    %13 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:374:23
                    %boxes.1 : Tensor[] = prim::CallMethod[name="predict_boxes"](%self, %predictions.1, %proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:372:16
                    %scores.1 : Tensor[] = prim::CallMethod[name="predict_probs"](%self, %predictions.1, %proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:373:17
                    %image_shapes.1 : (int, int)[] = prim::ListConstruct()
                    %12 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:374:23
                     = prim::Loop(%12, %13) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:374:23
                      block0(%14 : int):
                        %x.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%proposals.1, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:374:23
                        %image_size : (int, int) = prim::GetAttr[name="image_size"](%x.1)
                        %18 : (int, int)[] = aten::append(%image_shapes.1, %image_size) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:374:23
                        -> (%13)
                    %test_score_thresh : float = prim::GetAttr[name="test_score_thresh"](%self)
                    %test_nms_thresh : float = prim::GetAttr[name="test_nms_thresh"](%self)
                    %test_topk_per_image : int = prim::GetAttr[name="test_topk_per_image"](%self)
                    %26 : (__torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[], Tensor[]) = prim::CallFunction(%25, %boxes.1, %scores.1, %image_shapes.1, %test_score_thresh, %test_nms_thresh, %test_topk_per_image) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:375:15
                    return (%26)
              
                }
                method predict_boxes {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers,
                        %predictions.1 : (Tensor, Tensor),
                        %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                    %74 : Function = prim::Constant[name="cat"]()
                    %61 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:29
                    %32 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:79
                    %5 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:434:15
                    %7 : bool = aten::Bool(%5) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:434:15
                    %8 : bool = aten::__not__(%7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:434:11
                    %81 : Tensor[] = prim::If(%8) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:434:8
                      block0():
                        %9 : Tensor[] = prim::ListConstruct()
                        -> (%9)
                      block1():
                        %57 : Tensor, %proposal_deltas.3 : Tensor = prim::TupleUnpack(%predictions.1)
                        %num_prop_per_image.3 : int[] = prim::ListConstruct()
                        %60 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:29
                         = prim::Loop(%60, %61) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:29
                          block0(%62 : int):
                            %p.7 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%proposals.1, %62) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:29
                            %64 : int = prim::CallMethod[name="__len__"](%p.7) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:30
                            %65 : int[] = aten::append(%num_prop_per_image.3, %64) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:437:29
                            -> (%61)
                        %66 : Tensor[] = prim::ListConstruct()
                        %67 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:29
                         = prim::Loop(%67, %61) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:29
                          block0(%69 : int):
                            %p.11 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%proposals.1, %69) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:29
                            %71 : __torch__.detectron2.structures.boxes.Boxes = prim::CallMethod[name="__proposal_boxes_getter"](%p.11) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:30
                            %tensor.1 : Tensor = prim::GetAttr[name="tensor"](%71)
                            %73 : Tensor[] = aten::append(%66, %tensor.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:29
                            -> (%61)
                        %proposal_boxes.3 : Tensor = prim::CallFunction(%74, %66, %32) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:438:25
                        %box2box_transform.1 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%self)
                        %predict_boxes.3 : Tensor = prim::CallMethod[name="apply_deltas"](%box2box_transform.1, %proposal_deltas.3, %proposal_boxes.3) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:439:24
                        %79 : Tensor[] = aten::split(%predict_boxes.3, %num_prop_per_image.3, %32) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:443:15
                        -> (%79)
                    return (%81)
              
                }
                method predict_probs {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.___torch_mangle_407.FastRCNNOutputLayers,
                        %predictions.1 : (Tensor, Tensor),
                        %proposals.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11[]):
                    %22 : Function = prim::Constant[name="softmax"]()
                    %21 : NoneType = prim::Constant()
                    %20 : int = prim::Constant[value=3]()
                    %19 : int = prim::Constant[value=-1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:461:38
                    %10 : bool = prim::Constant[value=1]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:29
                    %26 : int = prim::Constant[value=0]() # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:462:51
                    %scores.1 : Tensor, %6 : Tensor = prim::TupleUnpack(%predictions.1)
                    %num_inst_per_image.1 : int[] = prim::ListConstruct()
                    %9 : int = aten::len(%proposals.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:29
                     = prim::Loop(%9, %10) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:29
                      block0(%11 : int):
                        %p.1 : __torch__.detectron2.export.torchscript_patch11.ScriptedInstances11 = aten::__getitem__(%proposals.1, %11) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:29
                        %14 : int = prim::CallMethod[name="__len__"](%p.1) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:30
                        %15 : int[] = aten::append(%num_inst_per_image.1, %14) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:460:29
                        -> (%10)
                    %probs.1 : Tensor = prim::CallFunction(%22, %scores.1, %19, %20, %21) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:461:16
                    %27 : Tensor[] = aten::split(%probs.1, %num_inst_per_image.1, %26) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\detectron2\modeling\roi_heads\fast_rcnn.py:462:15
                    return (%27)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.linear.___torch_mangle_405.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_405.Linear,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = aten::linear(%input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\linear.py:103:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.___torch_mangle_406.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_406.Linear,
                            %input.1 : Tensor):
                        %weight : Tensor = prim::GetAttr[name="weight"](%self)
                        %bias : Tensor = prim::GetAttr[name="bias"](%self)
                        %5 : Tensor = aten::linear(%input.1, %weight, %bias) # C:\Miniconda3\envs\tron2_copy\lib\site-packages\torch\nn\modules\linear.py:103:15
                        return (%5)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
